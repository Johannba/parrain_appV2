===== ./dashboard/signals.py =====
===== ./dashboard/models.py =====
# dashboard/models.py
from django.db import models
from django.utils import timezone
from accounts.models import Company
from django.core.exceptions import ValidationError
from django.db.models import Q, F

class Client(models.Model):
    company     = models.ForeignKey(Company, on_delete=models.CASCADE, related_name="clients")
    first_name  = models.CharField(max_length=100, blank=True)
    last_name   = models.CharField(max_length=100, blank=True)
    email       = models.EmailField(blank=True, null=True)
    phone       = models.CharField(max_length=32, blank=True)
    is_referrer = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.last_name} {self.first_name}".strip() or self.email or f"Client #{self.pk}"


class Referral(models.Model):
 
    company    = models.ForeignKey(Company, on_delete=models.CASCADE, related_name="referrals")
    referrer   = models.ForeignKey(Client, on_delete=models.CASCADE, related_name="referrals_made")
    referee    = models.ForeignKey(Client, on_delete=models.CASCADE, related_name="referrals_received")
    created_at = models.DateTimeField(default=timezone.now)

    class Meta:
        constraints = [
        ]

    def __str__(self):
        return f"{self.referrer} → {self.referee} ({self.company})"

===== ./dashboard/__init__.py =====
===== ./dashboard/apps.py =====
from django.apps import AppConfig


class DashboardConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'dashboard'
===== ./dashboard/forms.py =====
from django import forms
from django.forms import TextInput, EmailInput, CheckboxInput, Select
from .models import Client, Referral, Company

class ClientForm(forms.ModelForm):
    class Meta:
        model = Client
        fields = ("company", "last_name", "first_name", "email", "phone", "is_referrer")
        widgets = {
            "company": Select(attrs={"class": "form-select"}),
            "last_name": TextInput(attrs={"class": "form-control", "placeholder": "Nom"}),
            "first_name": TextInput(attrs={"class": "form-control", "placeholder": "Prénom"}),
            "email": EmailInput(attrs={"class": "form-control", "placeholder": "email@exemple.com"}),
            "phone": TextInput(attrs={"class": "form-control", "placeholder": "06 00 00 00 00"}),
            "is_referrer": CheckboxInput(attrs={"class": "form-check-input"}),
        }

    def __init__(self, *args, **kwargs):
        request = kwargs.pop("request", None)
        super().__init__(*args, **kwargs)

        user = getattr(request, "user", None)
        is_super = hasattr(user, "is_superadmin") and user.is_superadmin()

        if is_super:
            self.fields["company"].queryset = Company.objects.order_by("name")
        else:
            # Admin/Opérateur → company forcée
            self.fields["company"].queryset = Company.objects.filter(pk=getattr(user.company, "pk", None))
            self.fields["company"].empty_label = None



class ReferralForm(forms.ModelForm):
    class Meta:
        model = Referral
        fields = ("referrer", "referee")
        widgets = {
            "referrer": forms.Select(attrs={"class": "form-select"}),
            "referee": forms.Select(attrs={"class": "form-select"}),
            "status":   forms.Select(attrs={"class": "form-select"}),
        }

    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop("request", None)
        self.company = kwargs.pop("company", None)  # <-- on mémorise l’entreprise courante
        super().__init__(*args, **kwargs)

        user = getattr(self.request, "user", None)
        is_super = bool(user and hasattr(user, "is_superadmin") and user.is_superadmin())

        # Si superadmin et company non fournie, on montre tout (toutes entreprises)
        if is_super and self.company is None:
            self.fields["referrer"].queryset = (
                Client.objects.filter(is_referrer=True)
                .select_related("company")
                .order_by("last_name", "first_name")
            )
            self.fields["referee"].queryset = (
                Client.objects.filter(is_referrer=False)
                .select_related("company")
                .order_by("last_name", "first_name")
            )
        else:
            # Sinon on restreint à l’entreprise fournie (ou celle de l’utilisateur)
            comp = self.company or getattr(user, "company", None)
            self.fields["referrer"].queryset = (
                Client.objects.filter(company=comp, is_referrer=True)
                .order_by("last_name", "first_name")
            )
            self.fields["referee"].queryset = (
                Client.objects.filter(company=comp, is_referrer=False)
                .order_by("last_name", "first_name")
            )

        # Libellés ergonomiques dans le select
        def fmt(o):
            comp_name = o.company.name if o.company else "—"
            mail = o.email or "—"
            return f"{o.last_name} {o.first_name} — {mail} ({comp_name})"
        self.fields["referrer"].label_from_instance = fmt
        self.fields["referee"].label_from_instance  = fmt

    def clean(self):
        cleaned = super().clean()
        referrer = cleaned.get("referrer")
        referee  = cleaned.get("referee")

        # Règles de cohérence
        if referrer and not referrer.is_referrer:
            self.add_error("referrer", "Le parrain doit être un client marqué « parrain ».")
        if referee and referee.is_referrer:
            self.add_error("referee", "Le filleul doit être un client non parrain.")
        if referrer and referee:
            if referrer.company_id != referee.company_id:
                self.add_error("referee", "Parrain et filleul doivent appartenir à la même entreprise.")
            if referrer.id == referee.id:
                self.add_error("referee", "Parrain et filleul doivent être différents.")

        # Détection **doublon** : un filleul ne peut être parrainé qu'une fois par entreprise
        if referee:
            company = (
                self.company
                or getattr(getattr(self.request, "user", None), "company", None)
                or getattr(referee, "company", None)
            )

            if company and Referral.objects.filter(company=company, referee=referee).exists():
                # message clair, côté formulaire (l’unicité BD peut aussi lever une IntegrityError)
                self.add_error("referee", "Ce filleul a déjà un parrainage dans cette entreprise.")

        return cleaned

        
===== ./dashboard/admin.py =====
from django.contrib import admin

# Register your models here.
# dashboard/admin.py
from django.contrib import admin
from .models import Client, Referral

@admin.register(Client)
class ClientAdmin(admin.ModelAdmin):
    list_display = ("last_name", "first_name", "email", "company", "is_referrer")
    search_fields = ("last_name", "first_name", "email", "phone")
    list_filter = ("company", "is_referrer")

@admin.register(Referral)
class ReferralAdmin(admin.ModelAdmin):
    list_display  = ("id", "company", "referrer", "referee", "created_at")
    list_filter   = ("company",)                # ← plus de "status" ici
    search_fields = ("referrer__last_name", "referrer__first_name",
                     "referee__last_name", "referee__first_name")
    autocomplete_fields = ("company", "referrer", "referee")
    date_hierarchy = "created_at"

===== ./dashboard/tests.py =====
from django.test import TestCase

# Create your tests here.
===== ./dashboard/urls.py =====
# dashboard/urls.py
from django.urls import path
from . import views

app_name = "dashboard"

urlpatterns = [
    path('', views.dashboard_root, name='root'),
    path('superadmin/', views.superadmin_home, name='superadmin_home'),
    path('entreprise/', views.company_home, name='company_home'),

    # Clients
    path('clients/', views.clients_list, name='clients_list'),
    path('clients/<int:pk>/', views.client_detail, name='client_detail'),
    path('clients/<int:pk>/rewards/new/', views.reward_create, name='reward_create'),
    path("clients/new/", views.client_create, name="client_create"),
    path("clients/<int:pk>/edit/", views.client_update, name="client_update"),
    path("clients/<int:pk>/delete/", views.client_delete, name="client_delete"),

    # Parrainages
    path("referrals/new/", views.referral_create, name="referral_create"),
    path("referrals/<int:pk>/edit/", views.referral_update, name="referral_update"),
    path("referrals/<int:pk>/delete/", views.referral_delete, name="referral_delete"),

    # Attribution de récompense (filleul) — conservée pour compat
    path(
        "referrals/<int:referral_id>/validate-award/",
        views.validate_referral_and_award,
        name="validate_referral_and_award",
    ),
    # Attribution de récompense (parrain)
    path(
        "referrals/<int:referral_id>/validate-award-referrer/",
        views.validate_referral_and_award_referrer,
        name="validate_referral_and_award_referrer",
    ),
]
===== ./dashboard/views.py =====
# dashboard/views.py
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.core.exceptions import PermissionDenied
from django.core.paginator import Paginator
from django.db import IntegrityError, transaction
from django.db.models import Q
from django.shortcuts import get_object_or_404, redirect, render
from django.urls import reverse

from accounts.models import Company
from dashboard.models import Client, Referral
from .forms import ClientForm, ReferralForm
from rewards.models import Reward, RewardTemplate
from rewards.forms import RewardTemplateForm

# Tirage de récompense
from rewards.services.probabilities import tirer_recompense, SOUVENT, MOYEN, RARE, TRES_RARE
from django.db import transaction

# -------------------------------------------------------------
# Helpers
# -------------------------------------------------------------
def _is_superadmin(u) -> bool:
    return hasattr(u, "is_superadmin") and u.is_superadmin()


def _is_company_admin(u) -> bool:
    return hasattr(u, "is_admin_entreprise") and u.is_admin_entreprise()


def _is_operator(u) -> bool:
    return hasattr(u, "is_operateur") and u.is_operateur()


def _require_company_staff(user):
    if _is_superadmin(user) or _is_company_admin(user) or _is_operator(user):
        return
    raise PermissionDenied("Accès réservé au personnel.")


def _company_for(user):
    # Admin d’entreprise / Opérateur → sa company
    # Superadmin → doit choisir une entreprise (à adapter si tu as un sélecteur global)
    return getattr(user, "company", None)


# -------------------------------------------------------------
# Redirections d’accueil selon le rôle
# -------------------------------------------------------------
@login_required
def dashboard_root(request):
    u = request.user
    if _is_superadmin(u):
        return redirect("dashboard:superadmin_home")
    if _is_company_admin(u) or _is_operator(u):
        return redirect("dashboard:company_home")
    raise PermissionDenied("Accès réservé au personnel.")


@login_required
def superadmin_home(request):
    if not _is_superadmin(request.user):
        raise PermissionDenied("Réservé au Superadmin.")
    return render(request, "dashboard/superadmin_home.html", {})


@login_required
def company_home(request):
    u = request.user
    if not (_is_superadmin(u) or _is_company_admin(u) or _is_operator(u)):
        raise PermissionDenied("Réservé à l’Admin/Opérateur (ou Superadmin).")
    company = _company_for(u)
    return render(request, "dashboard/company_home.html", {"company": company})


# -------------------------------------------------------------
# Clients : création / liste / fiche / édition / suppression
# -------------------------------------------------------------
@login_required
def client_create(request):
    _require_company_staff(request.user)

    if request.method == "POST":
        form = ClientForm(request.POST, request=request)
        if form.is_valid():
            obj = form.save(commit=False)
            if not _is_superadmin(request.user):
                # sécurité multi-entreprise
                obj.company = request.user.company
            obj.save()
            messages.success(request, "Client créé.")
            return redirect("dashboard:clients_list")
    else:
        form = ClientForm(request=request)

    return render(request, "dashboard/client_form.html", {"form": form})


@login_required
def clients_list(request):
    _require_company_staff(request.user)

    u = request.user
    base_qs = Client.objects.all() if _is_superadmin(u) else Client.objects.filter(company=u.company)

    # Filtre par type
    t = (request.GET.get("type") or "tous").lower()
    if t == "parrains":
        qs = base_qs.filter(is_referrer=True)
    elif t == "filleuls":
        qs = base_qs.filter(is_referrer=False)
    else:
        qs = base_qs

    # Recherche plein-texte
    q = (request.GET.get("q") or "").strip()
    if q:
        qs = qs.filter(
            Q(last_name__icontains=q) |
            Q(first_name__icontains=q) |
            Q(email__icontains=q)
        )

    qs = qs.order_by("last_name", "first_name")

    return render(request, "dashboard/clients_list.html", {
        "clients": qs,
        "filter_type": t,
        "current_q": q,
    })


@login_required
def client_detail(request, pk: int):
    _require_company_staff(request.user)

    u = request.user
    if _is_superadmin(u):
        client = get_object_or_404(Client.objects.select_related("company"), pk=pk)
    else:
        client = get_object_or_404(Client.objects.select_related("company"), pk=pk, company=u.company)

    # Historique des parrainages (où le client est impliqué)
    history_qs = (
        Referral.objects
        .select_related("referrer", "referee")
        .filter(company=client.company)
        .filter(Q(referrer=client) | Q(referee=client))
        .order_by("-created_at", "-id")
    )
    history_page = Paginator(history_qs, 8).get_page(request.GET.get("h"))

    # Récompenses par statut
    rewards_ok      = Reward.objects.filter(company=client.company, client=client, state="SENT").order_by("-id")
    rewards_pending = Reward.objects.filter(company=client.company, client=client, state="PENDING").order_by("-id")
    rewards_unused  = Reward.objects.filter(company=client.company, client=client, state="DISABLED").order_by("-id")

    # KPIs
    kpi_obtenus  = rewards_ok.count()
    kpi_attente  = rewards_pending.count()
    kpi_nonutils = rewards_unused.count()

    # Pagination des 3 blocs
    p_ok      = Paginator(rewards_ok, 5)
    p_pending = Paginator(rewards_pending, 5)
    p_unused  = Paginator(rewards_unused, 5)

    return render(request, "dashboard/client_detail.html", {
        "company": client.company,
        "client": client,
        "history_page": history_page,
        "page_ok": p_ok.get_page(request.GET.get("ok")),
        "page_pending": p_pending.get_page(request.GET.get("pending")),
        "page_unused": p_unused.get_page(request.GET.get("unused")),
        "kpi_obtenus": kpi_obtenus,
        "kpi_attente": kpi_attente,
        "kpi_nonutils": kpi_nonutils,
    })


@login_required
def client_update(request, pk):
    _require_company_staff(request.user)

    obj = get_object_or_404(Client, pk=pk)
    if not _is_superadmin(request.user) and obj.company_id != request.user.company_id:
        raise PermissionDenied("Accès refusé.")

    if request.method == "POST":
        form = ClientForm(request.POST, instance=obj, request=request)
        if form.is_valid():
            c = form.save(commit=False)
            if not _is_superadmin(request.user):
                c.company = request.user.company
            c.save()
            messages.success(request, "Client mis à jour.")
            return redirect("dashboard:clients_list")
    else:
        form = ClientForm(instance=obj, request=request)

    return render(request, "dashboard/client_form.html", {"form": form})


@login_required
def client_delete(request, pk):
    _require_company_staff(request.user)

    obj = get_object_or_404(Client, pk=pk)
    if not _is_superadmin(request.user) and obj.company_id != request.user.company_id:
        raise PermissionDenied("Accès refusé.")

    if request.method == "POST":
        obj.delete()
        messages.success(request, "Client supprimé.")
        return redirect("dashboard:clients_list")

    return render(request, "dashboard/confirm_delete.html", {
        "title": "Supprimer le client",
        "message": f"Supprimer définitivement {obj.last_name} {obj.first_name} ?",
        "back_url": "dashboard:clients_list",
    })


# -------------------------------------------------------------
# Parrainages : création / édition / suppression
# -------------------------------------------------------------
@login_required
def referral_create(request):
    _require_company_staff(request.user)

    u = request.user
    is_super = _is_superadmin(u)

    # Entreprise courante pour le formulaire
    current_company = None
    if not is_super:
        current_company = _company_for(u)
    else:
        cid = request.GET.get("company")
        if cid:
            current_company = get_object_or_404(Company, pk=cid)

    if request.method == "POST":
        form = ReferralForm(request.POST, request=request, company=current_company)
        if form.is_valid():
            referral = form.save(commit=False)
            referral.company = current_company or getattr(referral.referrer, "company", None)

            try:
                referral.save()
            except IntegrityError:
                form.add_error("referee", "Ce filleul a déjà un parrainage dans cette entreprise.")
            else:
                messages.success(request, "Parrainage créé.")
                return redirect("dashboard:clients_list")
    else:
        form = ReferralForm(request=request, company=current_company)

    return render(request, "dashboard/referral_form.html", {"form": form})


@login_required
def referral_update(request, pk):
    _require_company_staff(request.user)

    obj = get_object_or_404(Referral, pk=pk)
    if not _is_superadmin(request.user) and obj.company_id != request.user.company_id:
        raise PermissionDenied("Accès refusé.")

    current_company = None if _is_superadmin(request.user) else request.user.company

    if request.method == "POST":
        form = ReferralForm(request.POST, instance=obj, request=request, company=current_company)
        if form.is_valid():
            r = form.save(commit=False)
            r.company = r.referrer.company  # cohérence
            r.save()
            messages.success(request, "Parrainage mis à jour.")
            return redirect("dashboard:referrals_list")
    else:
        form = ReferralForm(instance=obj, request=request, company=current_company)

    return render(request, "dashboard/referral_form.html", {"form": form})


@login_required
def referral_delete(request, pk: int):
    """
    Supprime un parrainage.
    - Si un champ POST 'back_client' est présent => on revient sur la fiche client.
    - Sinon => on revient sur la liste des clients.
    """
    _require_company_staff(request.user)

    obj = get_object_or_404(Referral, pk=pk)

    # Sécurité : un admin d’entreprise ne peut agir que sur sa company
    if not _is_superadmin(request.user) and obj.company_id != getattr(request.user, "company_id", None):
        raise PermissionDenied("Accès refusé.")

    # Détermine où revenir
    back_client_id = request.POST.get("back_client") or request.GET.get("back_client")
    back_url_name = "dashboard:client_detail" if back_client_id else "dashboard:clients_list"
    back_url_kwargs = {"pk": back_client_id} if back_client_id else {}

    if request.method == "POST":
        obj.delete()
        messages.success(request, "Parrainage supprimé.")
        return redirect(back_url_name, **back_url_kwargs)

    # GET : page de confirmation
    return render(request, "dashboard/confirm_delete.html", {
        "title": "Supprimer le parrainage",
        "message": "Confirmer la suppression de ce parrainage ?",
        "post_action": "dashboard:referral_delete",
        "post_kwargs": {"pk": obj.pk},
        "back_url_name": back_url_name,
        "back_url_kwargs": back_url_kwargs,
        "back_client_id": back_client_id,  # pour renvoyer l’info dans le POST
    })



# -------------------------------------------------------------
# Récompenses : création simple (manuel) & tirage automatique
# -------------------------------------------------------------
@login_required
def reward_create(request, pk: int):
    """
    Création manuelle d’une Reward pour un client.
    """
    _require_company_staff(request.user)

    u = request.user
    client = get_object_or_404(
        Client,
        pk=pk,
        **({} if _is_superadmin(u) else {"company": u.company})
    )

    if request.method == "POST":
        form = RewardTemplateForm(request.POST)
        if form.is_valid():
            reward = form.save(commit=False)
            reward.client = client
            reward.company = client.company
            reward.save()
            messages.success(request, "Récompense créée.")
            return redirect("dashboard:client_detail", pk=client.pk)
    else:
        form = RewardTemplateForm()

    return render(request, "dashboard/reward_form.html", {"form": form, "client": client})


@login_required
@transaction.atomic
def validate_referral_and_award(request, referral_id: int):
    """
    Valide un parrainage et attribue la récompense au FILLEUL (referee),
    puis redirige vers l'animation.
    """
    _require_company_staff(request.user)

    referral = get_object_or_404(
        Referral.objects.select_related("referee", "referrer", "company"),
        pk=referral_id
    )

    user_company = _company_for(request.user)
    if user_company and referral.company_id != user_company.id and not _is_superadmin(request.user):
        messages.error(request, "Ce parrainage n’appartient pas à votre entreprise.")
        return redirect("dashboard:clients_list")

    # Bénéficiaire = FILLEUL
    client = referral.referee

    # Tirage exact
    token = tirer_recompense(referral.company)

    # Clone du template correspondant au token tiré
    tpl = get_object_or_404(RewardTemplate, company=referral.company, bucket=token)

    reward = Reward.objects.create(
        company=referral.company,
        client=client,
        label=tpl.label,
        bucket=token,
        cooldown_days=tpl.cooldown_days,
        state="PENDING",
    )

    messages.success(
        request,
        f"Parrainage validé. Récompense pour le filleul « {client} » : {tpl.label}."
    )
    return redirect("rewards:spin", reward_id=reward.id)


# ---------------------------
# ATTRIBUER AU PARRAIN (referrer)
# ---------------------------
@login_required
@transaction.atomic
def validate_referral_and_award_referrer(request, referral_id: int):
    """
    Valide un parrainage et attribue la récompense au PARRAIN (referrer),
    puis redirige vers l'animation.
    """
    _require_company_staff(request.user)

    referral = get_object_or_404(
        Referral.objects.select_related("referee", "referrer", "company"),
        pk=referral_id
    )

    user_company = _company_for(request.user)
    if user_company and referral.company_id != user_company.id and not _is_superadmin(request.user):
        messages.error(request, "Ce parrainage n’appartient pas à votre entreprise.")
        return redirect("dashboard:clients_list")

    # Bénéficiaire = PARRAIN
    client = referral.referrer

    token = tirer_recompense(referral.company)
    tpl = get_object_or_404(RewardTemplate, company=referral.company, bucket=token)

    reward = Reward.objects.create(
        company=referral.company,
        client=client,
        label=tpl.label,
        bucket=token,
        cooldown_days=tpl.cooldown_days,
        state="PENDING",
    )

    messages.success(
        request,
        f"Parrainage validé. Récompense pour le parrain « {client} » : {tpl.label}."
    )
    return redirect("rewards:spin", reward_id=reward.id)===== ./templates/dashboard/home.html =====
{% load static %}
<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{% block title %}ParrainApp{% endblock %}</title>
  <!-- Bootstrap + thème local -->
  <link rel="stylesheet" href="{% static 'bootstrap/css/bootstrap.min.css' %}">
  <link rel="stylesheet" href="{% static 'css/app.css' %}">
</head>
<body data-page="{% block body_data_page %}{% endblock %}">
  <!-- TOP BAR (horizontal) -->
  <header class="topbar border-bottom sticky-top">
    <div class="topbar-gradient">
      <div class="container py-3">
        <div class="d-flex align-items-center justify-content-between gap-3">
          <a class="navbar-brand d-flex align-items-center gap-2 text-white text-decoration-none" href="{% url 'dashboard_home' %}">
            <span class="brand-dot"></span>
            <span class="fw-bold">ParrainApp</span>
          </a>
          <form class="d-none d-md-flex" role="search" style="min-width: 380px;">
            <div class="input-group input-group-sm">
              <span class="input-group-text">🔎</span>
              <input class="form-control" type="search" placeholder="Rechercher (clients, parrains…)" aria-label="Search">
            </div>
          </form>
          <div class="d-flex align-items-center gap-2">
            <a class="btn btn-sm btn-outline-light" href="{% url 'accounts:user_create' %}">Créer un utilisateur</a>
            <a class="btn btn-sm btn-primary" href="{% url 'accounts:company_list' %}">Entreprises</a>
            <div class="dropdown">
              <button class="btn btn-sm btn-outline-light dropdown-toggle" data-bs-toggle="dropdown">
                {{ request.user.get_username|default:"Compte" }}
              </button>
              <ul class="dropdown-menu dropdown-menu-end">
                <li><a class="dropdown-item" href="#">Profil</a></li>
                <li><a class="dropdown-item" href="#">Paramètres</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="{% url 'accounts:logout' %}">Déconnexion</a></li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- HORIZONTAL NAV (pills) -->
    <div class="topbar-nav bg-white">
      <div class="container">
        <ul class="nav nav-pills gap-1 py-2" id="mainNav">
          <li class="nav-item"><a class="nav-link {% block nav_dashboard_active %}{% endblock %}" href="{% url 'dashboard_home' %}">Tableau de bord</a></li>
          <li class="nav-item"><a class="nav-link {% block nav_users_active %}{% endblock %}" href="{% url 'accounts:user_list' %}">Utilisateurs</a></li>
          <li class="nav-item"><a class="nav-link {% block nav_companies_active %}{% endblock %}" href="{% url 'accounts:company_list' %}">Entreprises</a></li>
          <!-- nav métiers (quand on branchera les templates) -->
          <li class="nav-item"><a class="nav-link" href="#">Parrains</a></li>
          <li class="nav-item"><a class="nav-link" href="#">Parrainés</a></li>
          <li class="nav-item"><a class="nav-link" href="#">Clients</a></li>
          <li class="nav-item"><a class="nav-link" href="#">Récompenses</a></li>
          <li class="nav-item"><a class="nav-link" href="#">Statistiques</a></li>
        </ul>
      </div>
    </div>
  </header>

  <main class="container my-4">
    {% block content %}{% endblock %}
  </main>

  <script src="{% static 'bootstrap/js/bootstrap.bundle.min.js' %}"></script>
  <script src="{% static 'js/app.js' %}"></script>
</body>
</html>
===== ./templates/dashboard/company_home.html =====
{% extends "base_dashboard.html" %}
{% block title %}Tableau de bord (Entreprise) • ParrainApp{% endblock %}
{% block body_data_page %}dashboard{% endblock %}
{% block nav_dashboard_active %}active{% endblock %}

{% block content %}
<header class="mb-4">
  <h1 class="h4 section-title mb-1">
    Tableau de bord — {{ company.name|default:"Mon entreprise" }}
  </h1>
  <div class="text-secondary">
    Vue d’ensemble des parrainages, cadeaux et activité récente de l’entreprise.
  </div>
</header>

{# On réutilise exactement la même grille que le superadmin, c’est le même design. #}
<div class="row g-3 mb-3">
  <div class="col-12 col-md-6 col-xl-3">
    <div class="card h-100 shadow-sm"><div class="card-body">
      <div class="d-flex justify-content-between">
        <div>
          <div class="text-secondary small">Parrainages (mois)</div>
          <div class="stat-num">18</div>
        </div>
        <span class="badge badge-soft">+8% vs. N-1</span>
      </div>
    </div></div>
  </div>
  <div class="col-12 col-md-6 col-xl-3">
    <div class="card h-100 shadow-sm"><div class="card-body">
      <div class="d-flex justify-content-between">
        <div>
          <div class="text-secondary small">Cadeaux distribués</div>
          <div class="stat-num">47</div>
        </div>
        <span class="badge text-bg-success">OK</span>
      </div>
    </div></div>
  </div>
  <div class="col-12 col-md-6 col-xl-3">
    <div class="card h-100 shadow-sm"><div class="card-body">
      <div class="d-flex justify-content-between">
        <div>
          <div class="text-secondary small">Cadeaux en attente</div>
          <div class="stat-num">2</div>
        </div>
        <span class="badge text-bg-warning">Action</span>
      </div>
    </div></div>
  </div>
  <div class="col-12 col-md-6 col-xl-3">
    <div class="card h-100 shadow-sm"><div class="card-body">
      <div class="d-flex justify-content-between">
        <div>
          <div class="text-secondary small">Base clients</div>
          <div class="stat-num">320</div>
        </div>
        <span class="badge text-bg-secondary">Actifs</span>
      </div>
    </div></div>
  </div>
</div>

<div class="row g-3">
  <div class="col-lg-6">
    <div class="card shadow-sm h-100">
      <div class="card-header d-flex justify-content-between align-items-center">
        <div class="fw-semibold">Raccourcis</div>
        <small class="text-secondary">Modules</small>
      </div>
      <div class="card-body">
        <div class="row g-2">
          <div class="col-6 d-grid"><a class="btn btn-outline-primary" href="#">Inscrire un parrain</a></div>
          <div class="col-6 d-grid"><a class="btn btn-outline-primary" href="#">Enregistrer un parrainé</a></div>
          <div class="col-6 d-grid"><a class="btn btn-outline-primary" href="#">Gérer les récompenses</a></div>
          <div class="col-6 d-grid"><a class="btn btn-outline-primary" href="#">Voir les statistiques</a></div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-lg-6">
    <div class="card shadow-sm h-100">
      <div class="card-header">Activité récente</div>
      <div class="card-body">
        <ul class="list-group list-group-flush">
          <li class="list-group-item d-flex justify-content-between align-items-start">
            <div class="ms-2 me-auto"><div class="fw-semibold">Parrainage validé</div> Client ACME → « -15% »</div>
            <span class="badge text-bg-success rounded-pill">OK</span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-start">
            <div class="ms-2 me-auto"><div class="fw-semibold">Cadeau en attente</div> Envoyer le lien au parrain</div>
            <span class="badge text-bg-warning rounded-pill">2</span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-start">
            <div class="ms-2 me-auto"><div class="fw-semibold">Base clients</div> 1 nouveau contact importé</div>
            <span class="badge text-bg-secondary rounded-pill">+1</span>
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>
{% endblock %}
===== ./templates/dashboard/client_detail.html =====
{% extends "base_dashboard.html" %}
{% block title %}Fiche client — {{ client.last_name }} {{ client.first_name }}{% endblock %}
{% block body_data_page %}clients{% endblock %}
{% block nav_clients_active %}active{% endblock %}

{% block content %}
<style>
  .tall-card .card-body { max-height: 360px; overflow: auto; }
  @media (min-width: 1400px){
    .tall-card .card-body { max-height: 420px; }
  }
</style>

<header class="mb-3">
  <h1 class="h4 section-title mb-1">Fiche client</h1>
  <div class="text-secondary">Informations, cadeaux et historique</div>
</header>

<div class="row g-3">

  {# --------- COLONNE GAUCHE : Infos + Historique --------- #}
  <div class="col-lg-4">
    <div class="card shadow-sm mb-3">
      <div class="card-body">
        <div class="d-flex justify-content-between">
          <h2 class="h6 mb-3">Informations</h2>
          {% if client.is_referrer %}
            <span class="badge text-bg-info">Parrain</span>
          {% else %}
            <span class="badge text-bg-secondary">Filleul</span>
          {% endif %}
        </div>

        <div class="vstack gap-1 small mb-3">
          <div><span class="text-secondary">Nom :</span> {{ client.last_name|default:"—" }}</div>
          <div><span class="text-secondary">Prénom :</span> {{ client.first_name|default:"—" }}</div>
          <div><span class="text-secondary">Téléphone :</span> {{ client.phone|default:"—" }}</div>
          <div><span class="text-secondary">Email :</span> {{ client.email|default:"—" }}</div>
          <div><span class="text-secondary">Entreprise :</span> {{ company.name }}</div>
        </div>

        <hr class="my-2">

        <div class="d-flex justify-content-between align-items-center mb-2">
          <div class="fw-semibold">Historique des parrainages</div>
          <small class="text-secondary">Derniers d’abord</small>
        </div>

        <div class="tall-card">
  <div class="card-body p-0">
    {% if history_page and history_page.object_list %}
      <div class="list-group list-group-flush">
        {% for r in history_page.object_list %}
          <div class="list-group-item">
            <div class="d-flex justify-content-between align-items-center">
              <div class="me-2">
                {% if r.referrer_id == client.id %}
                  <strong>{{ r.referee.first_name }} {{ r.referee.last_name }}</strong>
                  <small class="text-secondary d-block">
                    Parrainé par {{ client.first_name }} {{ client.last_name }}
                  </small>
                {% else %}
                  <strong>{{ r.referrer.first_name }} {{ r.referrer.last_name }}</strong>
                  <small class="text-secondary d-block">Parrain de ce client</small>
                {% endif %}
                <small class="text-secondary">{{ r.created_at|date:"d/m/Y" }}</small>
              </div>

              <div class="d-flex flex-column gap-1">
                {% for ref in history_page.object_list %}
                    <div class="d-flex align-items-center justify-content-between border rounded p-2 mb-2">
                      <div>
                        <div class="fw-semibold">{{ ref.referrer }} → {{ ref.referee }}</div>
                        <div class="text-secondary small">Le {{ ref.created_at|date:"d/m/Y H:i" }}</div>
                      </div>

                      <form method="post"
                            action="{% url 'dashboard:validate_referral_and_award_referrer' referral_id=ref.id %}">
                        {% csrf_token %}
                        <button class="btn btn-sm btn-primary">
                          Attribuer au parrain (tirage + animation)
                        </button>
                      </form>
                    </div>
                  {% empty %}
                    <div class="text-secondary">Aucun parrainage.</div>
                  {% endfor %}


                <form method="post"
                      action="{% url 'dashboard:referral_delete' r.id %}"
                      onsubmit="return confirm('Supprimer ce parrainage ?');">
                  {% csrf_token %}
                  <input type="hidden" name="back_client" value="{{ client.id }}">
                  <button class="btn btn-sm btn-outline-danger" type="submit">Supprimer</button>
                </form>
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <div class="p-3 text-secondary">Aucun parrainage pour l’instant.</div>
    {% endif %}
  </div>

  {% if history_page and history_page.paginator.num_pages > 1 %}
    <div class="card-footer bg-transparent d-flex justify-content-end gap-2">
      {% if history_page.has_previous %}
        <a class="btn btn-sm btn-outline-secondary"
           href="?h={{ history_page.previous_page_number }}&ok={{ page_ok.number }}&pending={{ page_pending.number }}&unused={{ page_unused.number }}">
          Préc.
        </a>
      {% endif %}
      <span class="small align-self-center">Page {{ history_page.number }}/{{ history_page.paginator.num_pages }}</span>
      {% if history_page.has_next %}
        <a class="btn btn-sm btn-outline-secondary"
           href="?h={{ history_page.next_page_number }}&ok={{ page_ok.number }}&pending={{ page_pending.number }}&unused={{ page_unused.number }}">
          Suiv.
        </a>
      {% endif %}
    </div>
  {% endif %}
</div>

      </div>
    </div>
  </div>

  {# --------- COLONNE DROITE : 3 BLOCS --------- #}
  <div class="col-lg-8">

    {# 1) Cadeaux obtenus #}
    <div class="card shadow-sm tall-card mb-3">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span>Cadeaux distribués <span class="badge rounded-pill text-bg-success">{{ kpi_obtenus }}</span></span>
        <a class="btn btn-sm btn-primary" href="{% url 'dashboard:reward_create' client.id %}">Créer une récompense</a>
      </div>

      <div class="card-body">
        {% if page_ok and page_ok.object_list %}
          <div class="row g-2">
            {% for rw in page_ok.object_list %}
              <div class="col-12">
                <div class="card h-100 border-0 shadow-sm">
                  <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                      <div class="fw-semibold">{{ rw.label }}</div>
                      <small class="text-secondary">Obtenu le {{ rw.created_at|date:"d/m/Y" }}</small>
                    </div>
                    <span class="badge text-bg-success">OK</span>
                  </div>
                </div>
              </div>
            {% endfor %}
          </div>
        {% else %}
          <div class="text-secondary">Aucun cadeau obtenu.</div>
        {% endif %}
      </div>

      {% if page_ok and page_ok.paginator.num_pages > 1 %}
        <div class="card-footer bg-transparent d-flex justify-content-end gap-2">
          {% if page_ok.has_previous %}
            <a class="btn btn-sm btn-outline-secondary"
               href="?ok={{ page_ok.previous_page_number }}&pending={{ page_pending.number }}&unused={{ page_unused.number }}&h={{ history_page.number }}">
              Préc.
            </a>
          {% endif %}
          <span class="small align-self-center">Page {{ page_ok.number }}/{{ page_ok.paginator.num_pages }}</span>
          {% if page_ok.has_next %}
            <a class="btn btn-sm btn-outline-secondary"
               href="?ok={{ page_ok.next_page_number }}&pending={{ page_pending.number }}&unused={{ page_unused.number }}&h={{ history_page.number }}">
              Suiv.
            </a>
          {% endif %}
        </div>
      {% endif %}
    </div>

    {# 2) Cadeaux en attente #}
    <div class="card shadow-sm tall-card mb-3">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span>Cadeaux en attente <span class="badge rounded-pill text-bg-warning">{{ kpi_attente }}</span></span>
        <a class="btn btn-sm btn-primary" href="#">Envoyer par mail</a>
      </div>
      <div class="card-body">
        {% if page_pending and page_pending.object_list %}
          <div class="list-group list-group-flush">
            {% for rw in page_pending.object_list %}
              <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                  <div class="fw-semibold">{{ rw.label }}</div>
                  <small class="text-secondary">Créée le {{ rw.created_at|date:"d/m/Y" }}</small>
                </div>
                <a class="btn btn-sm btn-outline-primary" href="#">Envoyer</a>
              </div>
            {% endfor %}
          </div>
        {% else %}
          <div class="text-secondary">Aucun cadeau en attente.</div>
        {% endif %}
      </div>

      {% if page_pending and page_pending.paginator.num_pages > 1 %}
        <div class="card-footer bg-transparent d-flex justify-content-end gap-2">
          {% if page_pending.has_previous %}
            <a class="btn btn-sm btn-outline-secondary"
               href="?pending={{ page_pending.previous_page_number }}&ok={{ page_ok.number }}&unused={{ page_unused.number }}&h={{ history_page.number }}">
              Préc.
            </a>
          {% endif %}
          <span class="small align-self-center">Page {{ page_pending.number }}/{{ page_pending.paginator.num_pages }}</span>
          {% if page_pending.has_next %}
            <a class="btn btn-sm btn-outline-secondary"
               href="?pending={{ page_pending.next_page_number }}&ok={{ page_ok.number }}&unused={{ page_unused.number }}&h={{ history_page.number }}">
              Suiv.
            </a>
          {% endif %}
        </div>
      {% endif %}
    </div>

    {# 3) Cadeaux non utilisés #}
    <div class="card shadow-sm tall-card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span>Cadeaux non utilisés <span class="badge rounded-pill text-bg-secondary">{{ kpi_nonutils }}</span></span>
        <small class="text-secondary">Distribués mais non consommés</small>
      </div>
      <div class="card-body">
        {% if page_unused and page_unused.object_list %}
          <div class="list-group list-group-flush">
            {% for rw in page_unused.object_list %}
              <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                  <div class="fw-semibold">{{ rw.label }}</div>
                  <small class="text-secondary">Distribué le {{ rw.created_at|date:"d/m/Y" }}</small>
                </div>
                <span class="badge text-bg-warning">En cours</span>
              </div>
            {% endfor %}
          </div>
        {% else %}
          <div class="text-secondary">Aucun cadeau non utilisé.</div>
        {% endif %}
      </div>

      {% if page_unused and page_unused.paginator.num_pages > 1 %}
        <div class="card-footer bg-transparent d-flex justify-content-end gap-2">
          {% if page_unused.has_previous %}
            <a class="btn btn-sm btn-outline-secondary"
               href="?unused={{ page_unused.previous_page_number }}&ok={{ page_ok.number }}&pending={{ page_pending.number }}&h={{ history_page.number }}">
              Préc.
            </a>
          {% endif %}
          <span class="small align-self-center">Page {{ page_unused.number }}/{{ page_unused.paginator.num_pages }}</span>
          {% if page_unused.has_next %}
            <a class="btn btn-sm btn-outline-secondary"
               href="?unused={{ page_unused.next_page_number }}&ok={{ page_ok.number }}&pending={{ page_pending.number }}&h={{ history_page.number }}">
              Suiv.
            </a>
          {% endif %}
        </div>
      {% endif %}
    </div>

  </div>
</div>
{% endblock %}
===== ./templates/dashboard/referral_form.html =====
{% extends "base_dashboard.html" %}
{% block title %}Créer un parrainage{% endblock %}
{% block body_data_page %}referrals{% endblock %}
{% block nav_referrals_active %}active{% endblock %}

{% block content %}
<header class="d-flex align-items-center justify-content-between mb-4">
  <div>
    <h1 class="h4 section-title mb-1">Créer un parrainage</h1>
    <div class="text-secondary">Sélectionnez un <strong>Parrain</strong> et un <strong>Filleul</strong> de la même entreprise.</div>
  </div>
  <a class="btn btn-outline-secondary" href="{% url 'dashboard:clients_list' %}">← Retour</a>
</header>

<div class="row g-3">
  <div class="col-xl-8">
    <div class="card shadow-sm">
      <div class="card-header">Sélection</div>
      <div class="card-body">
        {% if form.non_field_errors %}
          <div class="alert alert-danger">
            {% for e in form.non_field_errors %}{{ e }}<br>{% endfor %}
          </div>
        {% endif %}

        <form method="post" novalidate>
          {% csrf_token %}

          <div class="mb-3">
            <label class="form-label" for="{{ form.referrer.id_for_label }}">Parrain *</label>
            {{ form.referrer }}
            <div class="form-text">Uniquement les clients marqués “Parrain”.</div>
            {% for e in form.referrer.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
          </div>

          <div class="mb-3">
            <label class="form-label" for="{{ form.referee.id_for_label }}">Filleul *</label>
            {{ form.referee }}
            <div class="form-text">Uniquement les clients “non parrain”.</div>
            {% for e in form.referee.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
          </div>

          {% if form.status %}
          <div class="mb-4">
            <label class="form-label" for="{{ form.status.id_for_label }}">Statut</label>
            {{ form.status }}
          </div>
          {% endif %}

          <div class="d-flex gap-2">
            <button class="btn btn-primary" type="submit">Créer</button>
            <a class="btn btn-outline-secondary" href="{% url 'dashboard:clients_list' %}">Annuler</a>
          </div>
        </form>

      </div>
    </div>
  </div>

  <div class="col-xl-4">
    <div class="card shadow-sm h-100">
      <div class="card-header">Règles</div>
      <div class="card-body small text-secondary">
        <ul class="mb-0">
          <li>Parrain et Filleul doivent appartenir à la <strong>même entreprise</strong>.</li>
          <li>Le Parrain doit être <strong>is_referrer=True</strong>.</li>
          <li>Le Filleul doit être <strong>is_referrer=False</strong>.</li>
        </ul>
      </div>
    </div>
  </div>
</div>
{% endblock %}
===== ./templates/dashboard/superadmin_home.html =====
{% extends "base_dashboard.html" %}
{% block title %}Tableau de bord (Superadmin) • ParrainApp{% endblock %}
{% block body_data_page %}dashboard{% endblock %}
{% block nav_dashboard_active %}active{% endblock %}

{% block content %}
<header class="mb-4">
  <h1 class="h4 section-title mb-1">Tableau de bord — Superadmin</h1>
  <div class="text-secondary">Vue d’ensemble de la plateforme (toutes entreprises).</div>
</header>

<div class="row g-3 mb-3">
  <div class="col-12 col-md-6 col-xl-3">
    <div class="card h-100 shadow-sm"><div class="card-body">
      <div class="d-flex justify-content-between">
        <div>
          <div class="text-secondary small">Parrainages (mois)</div>
          <div class="stat-num">42</div>
        </div>
        <span class="badge badge-soft">+12% vs. N-1</span>
      </div>
    </div></div>
  </div>
  <div class="col-12 col-md-6 col-xl-3">
    <div class="card h-100 shadow-sm"><div class="card-body">
      <div class="d-flex justify-content-between">
        <div>
          <div class="text-secondary small">Cadeaux distribués</div>
          <div class="stat-num">128</div>
        </div>
        <span class="badge text-bg-success">OK</span>
      </div>
    </div></div>
  </div>
  <div class="col-12 col-md-6 col-xl-3">
    <div class="card h-100 shadow-sm"><div class="card-body">
      <div class="d-flex justify-content-between">
        <div>
          <div class="text-secondary small">Cadeaux en attente</div>
          <div class="stat-num">6</div>
        </div>
        <span class="badge text-bg-warning">Action</span>
      </div>
    </div></div>
  </div>
  <div class="col-12 col-md-6 col-xl-3">
    <div class="card h-100 shadow-sm"><div class="card-body">
      <div class="d-flex justify-content-between">
        <div>
          <div class="text-secondary small">Base clients</div>
          <div class="stat-num">1 254</div>
        </div>
        <span class="badge text-bg-secondary">Actifs</span>
      </div>
    </div></div>
  </div>
</div>

<div class="row g-3">
  <div class="col-lg-6">
    <div class="card shadow-sm h-100">
      <div class="card-header d-flex justify-content-between align-items-center">
        <div class="fw-semibold">Raccourcis</div>
        <small class="text-secondary">Modules</small>
      </div>
      <div class="card-body">
        <div class="row g-2">
          <div class="col-6 d-grid"><a class="btn btn-outline-primary" href="#">Inscrire un parrain</a></div>
          <div class="col-6 d-grid"><a class="btn btn-outline-primary" href="#">Enregistrer un parrainé</a></div>
          <div class="col-6 d-grid"><a class="btn btn-outline-primary" href="#">Gérer les récompenses</a></div>
          <div class="col-6 d-grid"><a class="btn btn-outline-primary" href="#">Voir les statistiques</a></div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-lg-6">
    <div class="card shadow-sm h-100">
      <div class="card-header">Activité récente</div>
      <div class="card-body">
        <ul class="list-group list-group-flush">
          <li class="list-group-item d-flex justify-content-between align-items-start">
            <div class="ms-2 me-auto"><div class="fw-semibold">Parrainage validé</div> Dubois Émilie → Cadeau « -15% »</div>
            <span class="badge text-bg-success rounded-pill">OK</span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-start">
            <div class="ms-2 me-auto"><div class="fw-semibold">Cadeau en attente</div> Envoyer le lien au parrain</div>
            <span class="badge text-bg-warning rounded-pill">6</span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-start">
            <div class="ms-2 me-auto"><div class="fw-semibold">Base clients</div> 3 nouveaux contacts importés</div>
            <span class="badge text-bg-secondary rounded-pill">+3</span>
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>
{% endblock %}
===== ./templates/dashboard/reward_form.html =====
{% extends "base_dashboard.html" %}
{% block title %}Créer une récompense — {{ client.last_name }} {{ client.first_name }}{% endblock %}
{% block body_data_page %}clients{% endblock %}
{% block nav_clients_active %}active{% endblock %}

{% block content %}
<header class="mb-4">
  <div class="d-flex align-items-center justify-content-between">
    <div>
      <h1 class="h4 section-title mb-1">Créer une récompense</h1>
      <div class="text-secondary">
        Client : <strong>{{ client.last_name }} {{ client.first_name }}</strong> • Entreprise : {{ client.company.name }}
      </div>
    </div>
    <div class="d-none d-md-block">
      <a class="btn btn-outline-secondary" href="{% url 'dashboard:client_detail' client.id %}">← Retour à la fiche</a>
    </div>
  </div>
</header>

<div class="row g-3">
  <!-- Formulaire -->
  <div class="col-lg-7">
    <div class="card shadow-sm">
      <div class="card-header d-flex justify-content-between align-items-center">
        <div class="fw-semibold">Nouvelle récompense</div>
        <small class="text-secondary">Renseigne l’intitulé, le canal, etc.</small>
      </div>
      <div class="card-body">
        {% if form.non_field_errors %}
          <div class="alert alert-danger">
            {% for e in form.non_field_errors %}{{ e }}<br>{% endfor %}
          </div>
        {% endif %}

        <form method="post" novalidate>
          {% csrf_token %}

          <div class="mb-3">
            {% with field=form.label %}
              <label class="form-label" for="{{ field.id_for_label }}">{{ field.label }}</label>
              {{ field }}
              {% for e in field.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
            {% endwith %}
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                {% with field=form.channel %}
                  <label class="form-label" for="{{ field.id_for_label }}">{{ field.label }}</label>
                  {{ field }}
                  <div class="form-text">Ex : Mail, SMS, …</div>
                  {% for e in field.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
                {% endwith %}
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                {% with field=form.code %}
                  <label class="form-label" for="{{ field.id_for_label }}">{{ field.label }}</label>
                  {{ field }}
                  <div class="form-text">Ex : AB-123-456</div>
                  {% for e in field.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
                {% endwith %}
              </div>
            </div>
          </div>

          <div class="mb-4">
            {% with field=form.state %}
              <label class="form-label" for="{{ field.id_for_label }}">{{ field.label }}</label>
              {{ field }}
              {% for e in field.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
            {% endwith %}
          </div>

          <div class="d-flex gap-2">
            <button class="btn btn-primary" type="submit">Enregistrer</button>
            <a class="btn btn-outline-secondary" href="{% url 'dashboard:client_detail' client.id %}">Annuler</a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Panneau récap client -->
  <div class="col-lg-5">
    <div class="card shadow-sm h-100">
      <div class="card-header">Client</div>
      <div class="card-body">
        <div class="vstack small gap-1 mb-3">
          <div><span class="text-secondary">Nom :</span> {{ client.last_name|default:"—" }}</div>
          <div><span class="text-secondary">Prénom :</span> {{ client.first_name|default:"—" }}</div>
          <div><span class="text-secondary">Téléphone :</span> {{ client.phone|default:"—" }}</div>
          <div><span class="text-secondary">Email :</span> {{ client.email|default:"—" }}</div>
          <div><span class="text-secondary">Entreprise :</span> {{ client.company.name }}</div>
        </div>

        <div class="alert alert-info mb-0">
          La récompense sera rattachée à <strong>{{ client.last_name }} {{ client.first_name }}</strong> et à
          <strong>{{ client.company.name }}</strong>.
        </div>
      </div>
      <div class="card-footer bg-transparent">
        <a class="btn btn-sm btn-outline-primary" href="{% url 'dashboard:client_detail' client.id %}">Voir la fiche client</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}
===== ./templates/dashboard/clients_list.html =====
{% extends "base_dashboard.html" %}
{% block title %}Clients{% endblock %}
{% block body_data_page %}clients{% endblock %}
{% block nav_clients_active %}active{% endblock %}

{% block content %}

<div class="d-flex align-items-center justify-content-between mb-3">
  <h1 class="h4 section-title mb-0">Clients</h1>
  <div class="mb-3 d-flex gap-2">
  <a class="btn btn-primary" href="{% url 'dashboard:client_create' %}">Créer un client</a>
  <a class="btn btn-outline-primary" href="{% url 'dashboard:referral_create' %}">Créer un parrainage</a>
</div>

  <div class="btn-group">
    <a href="{% url 'dashboard:clients_list' %}?type=tous"
       class="btn btn-sm {% if filter_type == 'tous' %}btn-primary{% else %}btn-outline-primary{% endif %}">
       Tous
    </a>
    <a href="{% url 'dashboard:clients_list' %}?type=parrains"
       class="btn btn-sm {% if filter_type == 'parrains' %}btn-primary{% else %}btn-outline-primary{% endif %}">
       Parrains
    </a>
    <a href="{% url 'dashboard:clients_list' %}?type=filleuls"
       class="btn btn-sm {% if filter_type == 'filleuls' %}btn-primary{% else %}btn-outline-primary{% endif %}">
       Filleuls
    </a>
  </div>
</div>

{% include "partials/_clients_table.html" %}
{% endblock %}
===== ./templates/dashboard/client_form.html =====
{% extends "base_dashboard.html" %}
{% block title %}Créer / Modifier un client{% endblock %}
{% block body_data_page %}clients{% endblock %}
{% block nav_clients_active %}active{% endblock %}

{% block content %}
<header class="d-flex align-items-center justify-content-between mb-4">
  <div>
    <h1 class="h4 section-title mb-1">Client</h1>
    <div class="text-secondary">Créer ou modifier un client (parrain ou simple client).</div>
  </div>
  <a class="btn btn-outline-secondary" href="{% url 'dashboard:clients_list' %}">← Retour</a>
</header>

<div class="row g-3">
  <div class="col-xl-8">
    <div class="card shadow-sm">
      <div class="card-header d-flex align-items-center justify-content-between">
        <div class="fw-semibold">Informations</div>
        <small class="text-secondary">Champs requis *</small>
      </div>

      <div class="card-body">
        {% if form.non_field_errors %}
          <div class="alert alert-danger">
            {% for e in form.non_field_errors %}{{ e }}<br>{% endfor %}
          </div>
        {% endif %}

        <form method="post" novalidate>
          {% csrf_token %}

          {# Superadmin voit le champ entreprise, Admin/Opérateur non #}
          {% if form.company %}
          <div class="mb-3">
            <label class="form-label" for="{{ form.company.id_for_label }}">Entreprise *</label>
            {{ form.company }}
            {% for e in form.company.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
          </div>
          {% endif %}

          <div class="row g-3">
            <div class="col-md-6">
              <label class="form-label" for="{{ form.last_name.id_for_label }}">Nom *</label>
              {{ form.last_name }}
              {% for e in form.last_name.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
            </div>
            <div class="col-md-6">
              <label class="form-label" for="{{ form.first_name.id_for_label }}">Prénom *</label>
              {{ form.first_name }}
              {% for e in form.first_name.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
            </div>
          </div>

          <div class="row g-3 mt-1">
            <div class="col-md-6">
              <label class="form-label" for="{{ form.email.id_for_label }}">Email</label>
              {{ form.email }}
              {% for e in form.email.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
            </div>
            <div class="col-md-6">
              <label class="form-label" for="{{ form.phone.id_for_label }}">Téléphone</label>
              {{ form.phone }}
              {% for e in form.phone.errors %}<div class="invalid-feedback d-block">{{ e }}</div>{% endfor %}
            </div>
          </div>

          <hr class="my-4">

          <div class="form-check mb-3">
            {{ form.is_referrer }}
            <label class="form-check-label" for="{{ form.is_referrer.id_for_label }}">Marquer comme <strong>Parrain</strong></label>
          </div>

          <div class="d-flex gap-2">
            <button class="btn btn-primary" type="submit">Enregistrer</button>
            <a class="btn btn-outline-secondary" href="{% url 'dashboard:clients_list' %}">Annuler</a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <div class="col-xl-4">
    <div class="card shadow-sm h-100">
      <div class="card-header">Aide</div>
      <div class="card-body small text-secondary">
        <p>Un <strong>Parrain</strong> peut parrainer des filleuls et recevoir des récompenses.</p>
        <p>Les Admins/Opérateurs ne voient que leur entreprise. Le Superadmin peut choisir l’entreprise.</p>
      </div>
    </div>
  </div>
</div>
{% endblock %}
===== ./templates/dashboard/confirm_delete.html =====
{# dashboard/templates/dashboard/confirm_delete.html #}
{% extends "base_dashboard.html" %}
{% block title %}{{ title }}{% endblock %}
{% block body_data_page %}clients{% endblock %}

{% block content %}
<div class="row justify-content-center">
  <div class="col-lg-6">
    <div class="card shadow-sm">
      <div class="card-body">
        <h1 class="h5 mb-3">{{ title }}</h1>
        <p class="text-secondary mb-4">{{ message }}</p>

        <form method="post" action="{% url post_action post_kwargs.pk %}">
          {% csrf_token %}
          {# On renvoie l’info de la fiche d’où l’on vient si présent #}
          {% if back_client_id %}
            <input type="hidden" name="back_client" value="{{ back_client_id }}">
          {% endif %}

          <div class="d-flex gap-2">
            <a class="btn btn-outline-secondary"
               href="{% url back_url_name **back_url_kwargs %}">
              Annuler
            </a>
            <button class="btn btn-danger" type="submit">Supprimer</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
{% endblock %}
